#include <iostream>
#include <vector>
#include <bitset>
#include <map>
#include <math.h>
using namespace std;

[[noreturn]]
void error(string s) {
    cout << s << endl;
    exit(1);
}

void assert(bool condition, string s = "Assertion failed") {
    if (!condition) {
        error(s);
    }
}

int get_file_size(string filename) {
    FILE* file = fopen(filename.c_str(), "rb");
    fseek(file, 0, SEEK_END);
    int size = ftell(file);
    fclose(file);
    return size;
}

//todo: finish (should return `d8`)

int read_segment_marker(const vector<int>& file_data, int& file_pos) {
    if (file_pos >= file_data.size()) {
        error("Unexcepted end of file");
        return -1;
    }
    if (file_data[file_pos] == 0xff) {
        while (true) {
            if (file_data[file_pos] != 0xff) {
                if (file_data[file_pos] != 0) {
                    int marker = file_data[file_pos];
                    file_pos++;
                    return marker;
                } else {
                    error("Wrong marker code (zero)"); 
                    return -1;
                } 
            }
            file_pos++; 
            if (file_pos >= file_data.size()) {
                error("Unexcepted end of file");
                return -1;
            }
        }
    } else {
        error("Wrong segment start");
        return -1;
    }
}

int read_byte(const vector<int>& file_data, int& file_pos) {
    if (file_pos >= file_data.size()) {
        error("Unexcepted end of file");
        return -1;
    } 
    int byte = file_data[file_pos];
    file_pos++;
    return byte;
}

int read_short(const vector<int>& file_data, int& file_pos) {
    int hi = read_byte(file_data, file_pos);
    int lo = read_byte(file_data, file_pos);
    return hi * 256 + lo;
}

int read_segment_length(const vector<int>& file_data, int& file_pos) {
    return read_short(file_data, file_pos) - 2;
}

struct sof_data {
    int width;
    int height;
    //todo: components ?
};

const int SOI = 0xd8;  // start of image
const int EOI = 0xd9;  // end of image
const int SOF = 0xc0;  // start of frame
const int DHT = 0xc4;  // define Huffman table
const int SOS = 0xda;  // start of scan
const int RST0 = 0xd0; // minimal restart marker
const int RST7 = 0xd7; // maximal restart marker

struct comp_info_t {
    int id;
    int h_sampling;
    int v_sampling;
    int dc_ht_number;
    int ac_ht_number;    
};

void read_sof(const vector<int>& file_data, int& file_pos, int& width, int& height, comp_info_t comp_info[]) {
    int prec = read_byte(file_data, file_pos);
    assert(prec == 8, "Unsupported color depth");  
    height = read_short(file_data, file_pos);
    assert(height > 0, "Incorrect height of image");
    width = read_short(file_data, file_pos);
    assert(width > 0, "Incorrect width of image");
    int num_comps = read_byte(file_data, file_pos);
    assert(num_comps == 3, "Unsupported number of color components");
    //cout << width << ' ' << height << ' ' << num_comps << endl;
    for (int i = 0; i < 3; i++) {
        int comp_id = read_byte(file_data, file_pos);
        comp_info[i].id = comp_id;
        int sampling = read_byte(file_data, file_pos);
        int h_sampling = sampling / 16;
        int v_sampling = sampling % 16;
        comp_info[i].h_sampling = h_sampling;
        comp_info[i].v_sampling = v_sampling;
        assert(h_sampling >= 1 && h_sampling <= 4, "Incorrect sampling factor");
        assert(v_sampling >= 1 && v_sampling <= 4, "Incorrect sampling factor");
        //cout << "comp_id " << comp_id << ": ";
        //cout << "h_sampling " << h_sampling << ' ';
        //cout << "v_sampling " << v_sampling << endl;
        read_byte(file_data, file_pos);  // skip qtable num
    }
}

const int MAX_HUFF_BITS = 16;

struct huff_table_t {
    bool dc;  
    int number;  // 4 bits
    map<string, int> map;
};

//todo: one DHT segment can contain multiple Huffman tables!
void read_dht(const vector<int>& file_data, int& file_pos, int length, vector<huff_table_t>& huff_tables) {
    int read = 0;
    while (true) {
        assert(length - read >= 17);
        int info = read_byte(file_data, file_pos);
        int type = info / 16;
        int number = info % 16;
        assert(type == 0 || type == 1, "Incorrect Huffman table type");
        assert(number >= 0 && number <= 3, "Invalid Huffman table number");
        huff_table_t huff_table;
        if (type == 0) {
            huff_table.dc = true;
            huff_table.number = number;
        } else {
            huff_table.dc = false;
            huff_table.number = number;
        }
        //cout << "Huffman table dc " << huff_table.dc << " number " << huff_table.number << endl;
        int symbol_counts[17];  
        symbol_counts[0] = 0;  // symbol_counts[0] is unused
        int total_count = 0;
        for (int i = 1; i <= 16; i++) {
            symbol_counts[i] = read_byte(file_data, file_pos);
            //if (symbol_counts[i] > 0) {
            //    cout << "symbol_counts[" << i << "] == " << symbol_counts[i] << endl;
            //}
            total_count = total_count + symbol_counts[i];
        }
        assert(total_count <= 256, "Wrong number of symbols");
        //cout << "total_count == " << total_count <<  endl;
        int symbol_code = 0;
        int byte_index = 0;
        map<string, int> map;
        for (int len = 1; len <= 16; len++) {
            int symbol_count = symbol_counts[len];
            for (int i = 1; i <= symbol_count; i++) {
                string symbol = bitset<MAX_HUFF_BITS>(symbol_code).to_string();
                symbol = symbol.substr(MAX_HUFF_BITS - len, len);
                int symbol_byte = read_byte(file_data, file_pos);
                //cout << symbol << " -> " << symbol_byte << endl;
                map.emplace(symbol, symbol_byte);
                symbol_code++;
            }
            symbol_code *= 2;
        }
        //cout << endl;
        huff_table.map = map;    
        huff_tables.push_back(huff_table);
        read = read + 1 + 16 + total_count;
        if (read == length) {
            return;
        } 
    }
}

comp_info_t& find_comp_info_by_id(comp_info_t comp_info[3], int id) {
    for (int i = 0; i < 3; i++) {
        if (comp_info[i].id == id) {
            return comp_info[i];
        }
    }    
    error("Invalid component ID");
}

int find_max_h_sampling(comp_info_t comp_info[3]) {
    int max = 0;  
    for (int i = 0; i < 3; i++) {
        if (comp_info[i].h_sampling >= max) {
            max = comp_info[i].h_sampling;
        }
    }
    return max;    
}

int find_max_v_sampling(comp_info_t comp_info[3]) {
    int max = 0;  
    for (int i = 0; i < 3; i++) {
        if (comp_info[i].v_sampling >= max) {
            max = comp_info[i].v_sampling;
        }
    }
    return max;    
}

// note: modifies `comp_info` array
void read_sos(
    const vector<int>& file_data, int& file_pos, int length, 
    comp_info_t comp_info[3], vector<huff_table_t> huff_tables
) {
    int num_comps = read_byte(file_data, file_pos);
    assert(num_comps == 3, "Unsupported number of components");
    for (int i = 0; i < 3; i++) {
        int comp_id = read_byte(file_data, file_pos);
        int ht_numbers = read_byte(file_data, file_pos);
        int dc_ht_number = ht_numbers / 16;
        int ac_ht_number = ht_numbers % 16;
        comp_info_t& c = find_comp_info_by_id(comp_info, comp_id);
        c.dc_ht_number = dc_ht_number;
        c.ac_ht_number = ac_ht_number;
    }
    int spec_start = read_byte(file_data, file_pos);
    assert(spec_start == 0, "Partial scans are not supported"); 
    int spec_end = read_byte(file_data, file_pos);
    assert(spec_end == 63, "Partial scans are not supported"); 
    read_byte(file_data, file_pos); // ignore this byte
}

string read_data(const vector<int>& file_data, int& file_pos) {
    string data = "";
    while (true) {
        int byte = read_byte(file_data, file_pos);
        if (byte == 0xff) {
            int byte2 = file_data[file_pos];
            if (byte2 == 0 || (byte2 >= RST0 && byte2 <= RST7)) {  
                file_pos++;  // skip 00, d0-d7 (restart markers)
            } else {
                file_pos--;
                break;
            }
        }
        string s = bitset<8>(byte).to_string();
        data = data + s;
        //cout << byte << "  ==   " << s << endl;
    }
    //cout << data << endl;
    return data;
}

huff_table_t find_huff_table(
    vector<huff_table_t> huff_tables, 
    bool dc, 
    int number
) {
    for (int i = 0; i < huff_tables.size(); i++) {
        if (huff_tables[i].dc == dc && huff_tables[i].number == number) {
            return huff_tables[i];
        }
    }
    error("Unknown hufftable");
}

void decode_block(
    comp_info_t comp_info[3],
    vector<huff_table_t> huff_tables,
    int comp,
    const string& data,
    int& data_pos,
    vector<pair<int, int>>& coef_pos
) {
    //cout << "COMP" << comp << endl;
    for (int k = 0; k < 8 * 8;) {
        //cout << "remaining data " << data.substr(data_pos) << endl;
        bool dc = (k == 0); 
        int ht_number;
        //cout << "k " << k << "   dc " << dc << "    sym ";
        if (dc == true) {
            ht_number = comp_info[comp].dc_ht_number;
        } else {
            ht_number = comp_info[comp].ac_ht_number;
        } 
        const huff_table_t& table = find_huff_table(huff_tables, dc, ht_number);
        map<string, int> map = table.map;
        int code_len = -1;
        int symbol;
        for (auto& el : map) {
            string code = el.first;
            code_len = code.length();
            //cout << "Huffman code " << code << "  code_len " << code_len << endl;
            string s = data.substr(data_pos, code_len);
            if (s == code) {
                //cout << " ceof " << el.second << "   ";
                symbol = el.second;
                data_pos += code_len;
                break;
            }
        }
        assert(code_len != -1, "Invalid Huffman code");
        if (dc == true) {
            int coef_len = symbol;
            //cout << data.substr(data_pos, coef_len) << endl;
            data_pos += coef_len;
            k++;
        } else {  // ac
            int zero_repeat = symbol / 16;
            int coef_len = symbol % 16;
            if (coef_len != 0) {
                //cout << zero_repeat << " : " << coef_len << "     ";
                k += zero_repeat;
                //cout << data.substr(data_pos, coef_len) << endl;
                pair<int, int> el = make_pair(data_pos, coef_len);
                //cout << "pair " << el.first << " " << el.second << endl;
                coef_pos.push_back(el);
                data_pos += coef_len;
                k++;
            } else {
                if (zero_repeat == 15) {
                    k += 16;
                    //cout << "after skip zeros  k " << k << endl;
                } else {
                    //cout << "early eob" << endl;
                    break;  // early end of block 8x8
                }
            }
        }
    }
    //cout << endl;
}    

vector<pair<int, int>> decompress_data(
    int width, int height,
    comp_info_t comp_info[3], 
    vector<huff_table_t> huff_tables,
    const string& data
) {
    int block_count[3]; 
    for (int i = 0; i < 3; i++) {
        block_count[i] = comp_info[i].h_sampling * comp_info[i].v_sampling;
    }
    //cout << "Y blks/MCU: " << block_count[0] << "  Cb blks/MCU: " << block_count[1] << "  Cr blks/MCU: " << block_count[2] << endl;
    int max_h_sampling = find_max_h_sampling(comp_info);
    int max_v_sampling = find_max_v_sampling(comp_info);
    const int block_size = 8;
    int mcu_width = block_size * max_h_sampling;
    int mcu_height = block_size * max_v_sampling;
    //cout << "mcu_width " << mcu_width << endl;
    //cout << "mcu_height " << mcu_height << endl;    
    int mcu_image_rows = ceil((float)height / mcu_height);
    int mcu_image_cols = ceil((float)width / mcu_width);
    //cout << mcu_image_rows << " " << mcu_image_rows << endl;
    int data_pos = 0;
    vector<pair<int, int>> coef_pos;
    for (int row = 0; row < mcu_image_rows; row++) {
        for (int col = 0; col < mcu_image_cols; col++) {
            for (int comp = 0; comp < 3; comp++) {  // 0 - Y, etc
                // process single minimal coding unit (MCU)
                for (int i = 0; i < block_count[comp]; i++) {
                    // process single 8x8 block
                    decode_block(comp_info, huff_tables, comp, data, data_pos, coef_pos);
                }
            }
        }
        //cout << endl;
    }
    return coef_pos;
}

string string_to_bits(const string& s) {
    string res;
    for (int i = 0; i < s.length(); i++) {
        char c = s[i];
        string t = bitset<8>(c).to_string();
        res += t;
    }
    string null = bitset<8>(0).to_string();
    res += null;
    return res;
}

int sum_avail_bits(const vector<pair<int, int>>& coef_pos) {
    int res = 0;
    for (int i = 0; i < coef_pos.size(); i++) {
        res += coef_pos[i].second;
    }
    return res;
}

string write_bits(
    const string& bits,
    vector<pair<int, int>> coef_pos,
    const string& secret
) {
    string res = bits;
    //cout << data << endl;
    //cout << secret << endl;
    string secret_bits = string_to_bits(secret);
    //for (auto& el : coef_pos) cout << el.first << " " << el.second << endl;
    //cout << "secert_bits " << secret_bits << endl;
    int total_avail_bits = sum_avail_bits(coef_pos);
    //cout << "total_avail_bits " << total_avail_bits << endl;
    //cout << "secert_bits length " << secret_bits.length() << endl;
    if (secret_bits.length() > total_avail_bits) {
        error("Not enough available bits in the image.");
    }
    int k = 0;
    for (int i = 0; i < secret_bits.length(); i++) {
        int avail_bits = coef_pos[k].second;
        if (avail_bits > 0) {
            int p = coef_pos[k].first + avail_bits - 1;
            res[p] = secret_bits[i];
            coef_pos[k].second--;
            k++;
            if (k == coef_pos.size()) {
                k = 0;
            }
        }
    }    
    return res;
}

vector<int> make_result(
    vector<int> file_data, 
    int file_pos_before_coefs,
    int file_pos_after_coefs,
    string new_bits
) {
    vector<int> res;
    for (int i = 0; i < file_pos_before_coefs; i++) {
        res.push_back(file_data[i]);
    }
    cout << new_bits << endl << endl;
    assert(new_bits.length() % 8 == 0);
    int n = new_bits.length() / 8;
    for (int i = 0; i < n; i++) {
        
        for (int j = 0; j < 8; j++) {
            cout << new_bits[j];
        }
        
        cout << endl;
    }
    cout << endl;
    return res;
}

vector<int> inject_secret(vector<int> file_data, string secret) {
    int file_pos = 0;
    int first_marker = read_segment_marker(file_data, file_pos);
    assert(first_marker == SOI, "SOI marker is missing");
    int width;
    int height;
    comp_info_t comp_info[3];
    vector<huff_table_t> huff_tables;
    while (true) {
        int marker = read_segment_marker(file_data, file_pos);
        //cout << marker << ' ';
        if (marker == EOI) { // end of image, no length
            break;
        }
        int length = read_segment_length(file_data, file_pos);
        //cout << length << endl;        
        if (marker == SOF) {
            read_sof(file_data, file_pos, width, height, comp_info);
        } else if (marker == DHT) {
            read_dht(file_data, file_pos, length, huff_tables);
        } else if (marker == SOS) { 
            read_sos(file_data, file_pos, length, comp_info, huff_tables);
            int file_pos_before_coefs = file_pos;
            string bits = read_data(file_data, file_pos);
            int file_pos_after_coefs = file_pos;
            vector<pair<int, int>> coef_pos = decompress_data(width, height, comp_info, huff_tables, bits);
            string new_bits = write_bits(bits, coef_pos, secret);
            return make_result(
                file_data, 
                file_pos_before_coefs,
                file_pos_after_coefs,
                new_bits
            );
        } else {
            file_pos += length;  // skip the whole segment
        }
    }
    error("Incorrect JPEG image");
}

int main(int argc, char** argv) {
#ifdef COLD
    // test
    argc = 4;
    const char* _argv[] = {
        "program", 
        "in/rgb.jpg", 
        "in/result.jpg",
        "secret message!",
    };
    argv = (char**)_argv;
#endif    
    assert(argc == 4, "Wrong number of command line arguments.");
    
    cout << boolalpha;
    
    string source_name = argv[1];  
    string result_name = argv[2];   
    string secret = argv[3];
    
    cout << secret << endl;
    
    FILE* file = fopen(source_name.c_str(), "rb"); 
    assert(file != nullptr, "Unable to open the file.");
    int file_size = get_file_size(argv[1]);
    //cout << size << endl;
    vector<int> file_data = vector<int>(file_size + 1);
    for (int i = 0; i < file_size; i++) {
        file_data[i] = fgetc(file);
    }
    //cout << file_size - 280 - 2 - 2 - 7 - 3 - 2 << endl;
    //for (int i = 280; i < file_size; i++) {
        //cout << hex << file_data[i] << " ";
    //}
    //cout << endl;
    fclose(file);
    
    inject_secret(file_data, secret);
    
    //result_name
    
    cout << "ok" << endl;
    return 0;
}
